{"ast":null,"code":"import firebase from \"./firebase.js\";\nvar db = firebase.firestore();\nvar messaging = firebase.messaging(); // Add the public key generated from the console here.\n\nmessaging.usePublicVapidKey(\"BFVj_nB5KUhUpQbA1EYDPVHZIhs2awPNuZhM54OBS7bHk6DqYEmG6FRJdTurTS3Jp59OGCyA4RYTEcTBf1Hf5gY\");\nvar token = null;\nNotification.requestPermission().then(function (permission) {\n  if (permission === 'granted') {\n    console.log('Notification permission granted.'); // TODO(developer): Retrieve an Instance ID token for use with FCM.\n    // ...\n  } else {\n    console.log('Unable to get permission to notify.');\n  }\n}); // Get Instance ID token. Initially this makes a network call, once retrieved\n// subsequent calls to getToken will return from cache.\n\nmessaging.getToken().then(function (currentToken) {\n  if (currentToken) {\n    console.log(currentToken);\n    token = currentToken; //sendTokenToServer(currentToken);\n    //updateUIForPushEnabled(currentToken);\n  } else {\n    // Show permission request.\n    console.log('No Instance ID token available. Request permission to generate one.'); // Show permission UI.\n    //updateUIForPushPermissionRequired();\n    //setTokenSentToServer(false);\n  }\n}).catch(function (err) {\n  console.log('An error occurred while retrieving token. ', err); //showToken('Error retrieving Instance ID token. ', err);\n  //setTokenSentToServer(false);\n}); // Callback fired if Instance ID token is updated.\n\nmessaging.onTokenRefresh(function () {\n  messaging.getToken().then(function (refreshedToken) {\n    console.log('Token refreshed.');\n    console.log(refreshedToken);\n    token = refreshedToken; // Indicate that the new Instance ID token has not yet been sent to the\n    // app server.\n    //setTokenSentToServer(false);\n    // Send Instance ID token to app server.\n    //sendTokenToServer(refreshedToken);\n    // ...\n  }).catch(function (err) {\n    console.log('Unable to retrieve refreshed token ', err); //showToken('Unable to retrieve refreshed token ', err);\n  });\n});\nmessaging.onMessage(function (payload) {\n  console.log(\"onMessage \", payload);\n});\nfirebase.auth().onAuthStateChanged(function (USER) {\n  var user = USER; //console.log(user);\n\n  if (user) {// User is signed in.\n  } else {// No user is signed in.\n    }\n});\nexport function sendMessage() {\n  // This registration token comes from the client FCM SDKs.\n  var registrationToken = token;\n  var message = {\n    data: {\n      score: '850',\n      time: '2:45'\n    },\n    token: registrationToken\n  }; // Send a message to the device corresponding to the provided\n  // registration token.\n\n  admin.messaging().send(message).then(function (response) {\n    // Response is a message ID string.\n    console.log('Successfully sent message:', response);\n  }).catch(function (error) {\n    console.log('Error sending message:', error);\n  });\n}\nexport function GetUser() {\n  var user = firebase.auth().currentUser;\n  return user;\n}\nexport function GetUserData(currentComponent) {\n  var user = firebase.auth().currentUser;\n\n  if (user) {\n    var docRef = db.collection(\"users\").doc(user.uid);\n    docRef.get().then(function (doc) {\n      if (doc && doc.exists) {\n        //console.log(doc);\n        var data = doc.data(); //console.log(data);\n\n        currentComponent.setState({\n          User: user,\n          User_Loaded: true,\n          User_Firstname: data.User_Firstname,\n          User_Lastname: data.User_Lastname,\n          User_Email: data.User_Email,\n          User_Friends: data.User_Friends\n        });\n      }\n    }).catch(function (error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // ...\n\n      alert(\"Error Code: \" + errorCode + \"\\n\" + errorMessage);\n    });\n  } else {\n    currentComponent.setState({\n      User: null,\n      User_Loaded: false,\n      User_Firstname: \"\",\n      User_Lastname: \"\",\n      User_Email: \"\",\n      User_Friends: \"\"\n    });\n  }\n}\nexport function CreateUser(firstname, lastname, email, password, props) {\n  firebase.auth().createUserWithEmailAndPassword(email, password).then(function (cred) {\n    return db.collection(\"users\").doc(cred.user.uid).set({\n      User_Firstname: firstname,\n      User_Lastname: lastname,\n      User_Email: email,\n      User_Friends: []\n    });\n  }).then(function () {\n    //create user successful\n    alert(\"Created User\");\n    props.history.push(\"/userpage\");\n  }).catch(function (error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message; // ...\n\n    alert(\"Error Code: \" + errorCode + \"\\n\" + errorMessage);\n  });\n}\nexport function Login(email, password, props) {\n  firebase.auth().signInWithEmailAndPassword(email, password).then(function () {\n    //sign in successful\n    alert(\"Logged In\");\n    props.history.push(\"/userpage\");\n  }).catch(function (error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message; // ...\n\n    alert(\"Error Code: \" + errorCode + \"\\n\" + errorMessage);\n  });\n}\nexport function Logout(props) {\n  firebase.auth().signOut().then(function () {\n    // Sign-out successful.\n    alert(\"Logged Out\");\n    props.history.push(\"/login\");\n  }).catch(function (error) {\n    // An error happened.\n    var errorCode = error.code;\n    var errorMessage = error.message;\n    alert(\"Error Code: \" + errorCode + \"\\n\" + errorMessage);\n  });\n}","map":{"version":3,"sources":["D:\\Documents\\CS 180 Software Engineering\\DJ-IRS\\src\\UserFunctions.js"],"names":["firebase","db","firestore","messaging","usePublicVapidKey","token","Notification","requestPermission","then","permission","console","log","getToken","currentToken","catch","err","onTokenRefresh","refreshedToken","onMessage","payload","auth","onAuthStateChanged","USER","user","sendMessage","registrationToken","message","data","score","time","admin","send","response","error","GetUser","currentUser","GetUserData","currentComponent","docRef","collection","doc","uid","get","exists","setState","User","User_Loaded","User_Firstname","User_Lastname","User_Email","User_Friends","errorCode","code","errorMessage","alert","CreateUser","firstname","lastname","email","password","props","createUserWithEmailAndPassword","cred","set","history","push","Login","signInWithEmailAndPassword","Logout","signOut"],"mappings":"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","sourcesContent":["import firebase from \"./firebase.js\";\r\n\r\nvar db = firebase.firestore();\r\nconst messaging = firebase.messaging();\r\n// Add the public key generated from the console here.\r\nmessaging.usePublicVapidKey(\"BFVj_nB5KUhUpQbA1EYDPVHZIhs2awPNuZhM54OBS7bHk6DqYEmG6FRJdTurTS3Jp59OGCyA4RYTEcTBf1Hf5gY\");\r\n\r\n\r\nvar token = null;\r\n\r\n\r\n\r\n\r\nNotification.requestPermission().then(function(permission) {\r\n  if (permission === 'granted') {\r\n    console.log('Notification permission granted.');\r\n    // TODO(developer): Retrieve an Instance ID token for use with FCM.\r\n    // ...\r\n  } else {\r\n    console.log('Unable to get permission to notify.');\r\n  }\r\n});\r\n\r\n// Get Instance ID token. Initially this makes a network call, once retrieved\r\n// subsequent calls to getToken will return from cache.\r\nmessaging.getToken().then(function(currentToken) {\r\n  if (currentToken) {\r\n    console.log(currentToken);\r\n    token = currentToken;\r\n    //sendTokenToServer(currentToken);\r\n    //updateUIForPushEnabled(currentToken);\r\n    \r\n  } else {\r\n    // Show permission request.\r\n    console.log('No Instance ID token available. Request permission to generate one.');\r\n    // Show permission UI.\r\n    //updateUIForPushPermissionRequired();\r\n    //setTokenSentToServer(false);\r\n  }\r\n}).catch(function(err) {\r\n  console.log('An error occurred while retrieving token. ', err);\r\n  //showToken('Error retrieving Instance ID token. ', err);\r\n  //setTokenSentToServer(false);\r\n});\r\n\r\n// Callback fired if Instance ID token is updated.\r\nmessaging.onTokenRefresh(function() {\r\n  messaging.getToken().then(function(refreshedToken) {\r\n    console.log('Token refreshed.');\r\n    console.log(refreshedToken);\r\n    token = refreshedToken;\r\n    // Indicate that the new Instance ID token has not yet been sent to the\r\n    // app server.\r\n    //setTokenSentToServer(false);\r\n    // Send Instance ID token to app server.\r\n    //sendTokenToServer(refreshedToken);\r\n    // ...\r\n  }).catch(function(err) {\r\n    console.log('Unable to retrieve refreshed token ', err);\r\n    //showToken('Unable to retrieve refreshed token ', err);\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmessaging.onMessage(function (payload) {\r\n  console.log(\"onMessage \", payload);\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfirebase.auth().onAuthStateChanged(function(USER) {\r\n  var user = USER;\r\n    //console.log(user);\r\n\r\n    if (user) {\r\n      // User is signed in.\r\n        \r\n\r\n    } else {\r\n      // No user is signed in.\r\n    }\r\n});\r\n\r\n\r\n\r\nexport function sendMessage() {\r\n  // This registration token comes from the client FCM SDKs.\r\n  var registrationToken = token;\r\n\r\n  var message = {\r\n    data: {\r\n      score: '850',\r\n      time: '2:45'\r\n    },\r\n    token: registrationToken\r\n  };\r\n\r\n  // Send a message to the device corresponding to the provided\r\n  // registration token.\r\n  admin.messaging().send(message)\r\n    .then((response) => {\r\n      // Response is a message ID string.\r\n      console.log('Successfully sent message:', response);\r\n    })\r\n    .catch((error) => {\r\n      console.log('Error sending message:', error);\r\n    });\r\n}\r\n\r\n\r\nexport function GetUser() {\r\n  var user = firebase.auth().currentUser;\r\n  return user;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function GetUserData(currentComponent) {\r\n  var user = firebase.auth().currentUser;\r\n\r\n    if(user) {\r\n      var docRef = db.collection(\"users\").doc(user.uid);\r\n      docRef.get().then( function(doc) {\r\n        if(doc && doc.exists) {\r\n          //console.log(doc);\r\n          const data = doc.data();\r\n          //console.log(data);\r\n          currentComponent.setState( {\r\n            User: user,\r\n            User_Loaded: true,\r\n            User_Firstname: data.User_Firstname,\r\n            User_Lastname: data.User_Lastname,\r\n            User_Email: data.User_Email,\r\n            User_Friends: data.User_Friends,\r\n          });\r\n        }\r\n      }).catch(function(error) {\r\n        // Handle Errors here.\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        // ...\r\n\r\n        alert(\"Error Code: \" + errorCode + \"\\n\" + errorMessage);\r\n      });\r\n      \r\n    }else {\r\n      currentComponent.setState( {\r\n        User: null,\r\n        User_Loaded: false,\r\n        User_Firstname: \"\",\r\n        User_Lastname: \"\",\r\n        User_Email: \"\",\r\n        User_Friends: \"\",\r\n      });\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function CreateUser(firstname, lastname, email, password, props) {\r\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(cred => {\r\n          return db.collection(\"users\").doc(cred.user.uid).set({\r\n            User_Firstname: firstname,\r\n            User_Lastname: lastname,\r\n            User_Email: email,\r\n            User_Friends: [],\r\n          });\r\n          \r\n        }).then( function() {\r\n            //create user successful\r\n            alert(\"Created User\");\r\n            props.history.push(\"/userpage\");\r\n        }).catch(function(error) {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            // ...\r\n\r\n            alert(\"Error Code: \" + errorCode + \"\\n\" + errorMessage);\r\n\r\n          });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function Login(email, password, props) {\r\n    firebase.auth().signInWithEmailAndPassword(email, password).then(function() {\r\n      //sign in successful\r\n      alert(\"Logged In\");\r\n      props.history.push(\"/userpage\");\r\n      \r\n    }).catch(function(error) {\r\n        // Handle Errors here.\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        // ...\r\n\r\n        alert(\"Error Code: \" + errorCode + \"\\n\" + errorMessage);\r\n      });\r\n      \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function Logout(props) {\r\n    \r\n      firebase.auth().signOut().then(function() {\r\n        // Sign-out successful.\r\n        alert(\"Logged Out\");\r\n        props.history.push(\"/login\");\r\n        \r\n      }).catch(function(error) {\r\n        // An error happened.\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        alert(\"Error Code: \" + errorCode + \"\\n\" + errorMessage);\r\n      });\r\n      \r\n      \r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}